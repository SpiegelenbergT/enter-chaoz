{"version":3,"sources":["todo/todo.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YASA;gBAGC,qBACS,IAAiB;oBAAjB,SAAI,GAAJ,IAAI,CAAa;oBAHnB,UAAK,GAAY,EAAE,CAAC;gBAIxB,CAAC;gBAEJ,2BAAK,GAAL;oBAAA,iBAIC;oBAHA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;yBACrC,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;yBAClC,SAAS,CAAC,UAAC,KAAc,IAAK,OAAA,KAAI,CAAC,KAAK,GAAG,KAAK,EAAlB,CAAkB,CAAC,CAAC;gBACrD,CAAC;gBAED,4BAAM,GAAN,UAAO,IAAW;oBACjB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAEzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;yBAC9B,SAAS,CAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAvB,CAAuB,CAAC,CAAC;gBAC5C,CAAC;gBAED,4BAAM,GAAN,UAAO,IAAW;oBACjB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAU,IAAI,CAAC,EAAI,EAAE,IAAI,CAAC;yBACzC,SAAS,CAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAvB,CAAuB,CAAC,CAAC;gBAC5C,CAAC;gBAED,4BAAM,GAAN,UAAO,IAAW;oBACjB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;oBAE/C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAU,IAAI,CAAC,EAAI,CAAC;yBACnC,SAAS,CAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAvB,CAAuB,CAAC,CAAC;gBAC5C,CAAC;gBA/BF;oBAAC,iBAAU,EAAE;;+BAAA;gBAgCb,kBAAC;YAAD,CA/BA,AA+BC,IAAA;YA/BD,qCA+BC,CAAA","file":"todo/todo.service.js","sourcesContent":["import 'rxjs/add/operator/map';\n\nimport {Injectable} from 'angular2/core';\nimport {Response} from 'angular2/http';\n\nimport {RestService} from '../shared/services/rest.service';\nimport {ITodo} from './todo.interface';\n\n@Injectable()\nexport class TodoService {\n\tpublic todos: ITodo[] = [];\n\n\tconstructor(\n\t\tprivate rest: RestService\n\t) {}\n\n\tfetch(): void {\n\t\tthis.rest.read('/todos', { userId: 1 })\n\t\t\t.map((res: Response) => res.json())\n\t\t\t.subscribe((todos: ITodo[]) => this.todos = todos);\n\t}\n\n\tcreate(todo: ITodo): void {\n\t\tthis.todos.unshift(todo);\n\n\t\tthis.rest.create('/todos', todo)\n\t\t\t.subscribe(() => console.log('created!'));\n\t}\n\n\tupdate(todo: ITodo): void {\n\t\tthis.rest.update(`/todos/${todo.id}`, todo)\n\t\t\t.subscribe(() => console.log('updated!'));\n\t}\n\n\tdelete(todo: ITodo): void {\n\t\tthis.todos.splice(this.todos.indexOf(todo), 1);\n\n\t\tthis.rest.delete(`/todos/${todo.id}`)\n\t\t\t.subscribe(() => console.log('deleted!'));\n\t}\n}\n"],"sourceRoot":"/Users/robbertvanmarkus/Projects/porn-wear/src/scripts"}