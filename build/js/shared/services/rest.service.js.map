{"version":3,"sources":["shared/services/rest.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBAAiC,+BAAkB;gBAClD;oBACC,iBAAO,CAAC;oBACR,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;oBAC5C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;gBACzD,CAAC;gBANF;oBAAC,iBAAU,EAAE;;+BAAA;gBAOb,kBAAC;YAAD,CANA,AAMC,EANgC,yBAAkB,EAMlD;YAND,qCAMC,CAAA;YAGD;gBACC,qBACS,IAAU,EACV,WAAwB;oBADxB,SAAI,GAAJ,IAAI,CAAM;oBACV,gBAAW,GAAX,WAAW,CAAa;gBAC9B,CAAC;gBAEJ,4BAAM,GAAN,UAAO,IAAY,EAAE,IAAY;oBAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,oBAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrD,CAAC;gBAED,0BAAI,GAAJ,UAAK,IAAY,EAAE,MAAe;oBACjC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,oBAAa,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;gBAC5D,CAAC;gBAED,4BAAM,GAAN,UAAO,IAAY,EAAE,IAAY;oBAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,oBAAa,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACpD,CAAC;gBAED,4BAAM,GAAN,UAAO,IAAY;oBAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,oBAAa,CAAC,MAAM,CAAC,CAAC;gBACjD,CAAC;gBAEO,6BAAO,GAAf,UAAgB,IAAY,EAAE,MAAqB,EAAE,IAAa,EAAE,MAAe;oBAClF,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;wBACvD,MAAM,EAAE,MAAM;wBACd,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,IAAI;wBAChC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;wBAC1B,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;qBAC9B,CAAC,CAAC,CAAC;oBAEJ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,cAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChD,CAAC;gBAEO,+BAAS,GAAjB,UAAkB,GAAW;oBAC5B,IAAI,GAAG,GAAG,EAAE,CAAC;oBAEb,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC3B,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACpE,CAAC;oBACF,CAAC;oBAED,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtB,CAAC;gBA5CF;oBAAC,iBAAU,EAAE;;+BAAA;gBA6Cb,kBAAC;YAAD,CA5CA,AA4CC,IAAA;YA5CD,qCA4CC,CAAA","file":"shared/services/rest.service.js","sourcesContent":["import 'rxjs/add/operator/map';\n\nimport {Observable} from 'rxjs';\nimport {Injectable} from 'angular2/core';\nimport {Http, Request, Response, RequestMethod, RequestOptions, BaseRequestOptions} from 'angular2/http';\n\n@Injectable()\nexport class RestOptions extends BaseRequestOptions {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.url = '//jsonplaceholder.typicode.com';\n\t\tthis.headers.append('Content-Type', 'application/json');\n\t}\n}\n\n@Injectable()\nexport class RestService {\n\tconstructor(\n\t\tprivate http: Http,\n\t\tprivate restOptions: RestOptions\n\t) {}\n\n\tcreate(path: string, body: Object): Observable<Response> {\n\t\treturn this.request(path, RequestMethod.Post, body);\n\t}\n\n\tread(path: string, search?: Object): Observable<Response> {\n\t\treturn this.request(path, RequestMethod.Get, null, search);\n\t}\n\n\tupdate(path: string, body: Object): Observable<Response> {\n\t\treturn this.request(path, RequestMethod.Put, body);\n\t}\n\n\tdelete(path: string): Observable<Response> {\n\t\treturn this.request(path, RequestMethod.Delete);\n\t}\n\n\tprivate request(path: string, method: RequestMethod, body?: Object, search?: Object): Observable<Response> {\n\t\tlet options = new RequestOptions(this.restOptions.merge({\n\t\t\tmethod: method,\n\t\t\turl: this.restOptions.url + path,\n\t\t\tbody: JSON.stringify(body),\n\t\t\tsearch: this.serialize(search)\n\t\t}));\n\n\t\treturn this.http.request(new Request(options));\n\t}\n\n\tprivate serialize(obj: Object): string {\n\t\tvar str = [];\n\n\t\tfor (let p in obj) {\n\t\t\tif (obj.hasOwnProperty(p)) {\n\t\t\t\tstr.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n\t\t\t}\n\t\t}\n\n\t\treturn str.join('&');\n\t}\n}\n"],"sourceRoot":"/Users/robbertvanmarkus/Projects/porn-wear/src/scripts"}